#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 62 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 9 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 9 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 255
255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 7586 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 24 3 1 #" "
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 17 3 45 #";this is from (*) and key to making this work"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 12 #"syntax-rules"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 15 3 5 #"delay"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"force"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"the-empty-stream"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"stream-null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-map"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"stream-null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 16 #"the-empty-stream"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 10 #"stream-map"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"stream-map2"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 10 #"argstreams"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"stream-null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 10 #"argstreams"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 16 #"the-empty-stream"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"cons-stream"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 10 #"argstreams"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 11 #"stream-map2"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 10 #"argstreams"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"display-line"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"show"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"display-line"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"stream-for-each"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"stream-null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"'"
0 0 14 3 4 #"done"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 15 #"stream-for-each"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"display-stream"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"stream-for-each"
0 0 24 3 1 #" "
0 0 14 3 12 #"display-line"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 25 #"stream-enumerate-interval"
0 0 24 3 1 #" "
0 0 14 3 3 #"low"
0 0 24 3 1 #" "
0 0 14 3 4 #"high"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 3 #"low"
0 0 24 3 1 #" "
0 0 14 3 4 #"high"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 16 #"the-empty-stream"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"cons-stream"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 3 #"low"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 25 #"stream-enumerate-interval"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"low"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 14 3 4 #"high"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"stream-filter"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 12 #"stream-null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 16 #"the-empty-stream"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 4 #"pred"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 13 #"stream-filter"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 4 #"pred"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"stream-filter"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"memo-proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 12 #"already-run?"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #") ("
0 0 14 3 6 #"result"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 12 #"already-run?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 12 #"already-run?"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 6 #"result"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 6 #"result"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";Inifnite streams"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 8 #"Inifnite"
0 0 24 3 1 #" "
0 0 14 3 7 #"streams"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 22 #"integers-starting-from"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 22 #"integers-starting-from"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"integers"
0 0 24 3 2 #" ("
0 0 14 3 22 #"integers-starting-from"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";integers"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"divisible?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"no-sevens"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"stream-filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 10 #"divisible?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 8 #"integers"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";no-sevens"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";(stream-ref no-sevens 100) ; 117 ; to access certain elements from "
 #"the stream"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"fibgen"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 6 #"fibgen"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"fibs"
0 0 24 3 2 #" ("
0 0 14 3 6 #"fibgen"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";fibs"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";(stream-ref fibs 10)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";sieve of Eratosthenes"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"sieve"
0 0 24 3 1 #" "
0 0 14 3 2 #"of"
0 0 24 3 1 #" "
0 0 14 3 12 #"Eratosthenes"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"sieve"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"sieve"
0 0 24 3 2 #" ("
0 0 14 3 13 #"stream-filter"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 10 #"divisible?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"primes"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"sieve"
0 0 24 3 2 #" ("
0 0 14 3 22 #"integers-starting-from"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";primes"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 104
(
 #";(stream-for-each display-line primes) this will start producing pri"
 #"mes and will eventually crash memory"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";(stream-ref primes 50) ; 233"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; Application of sieve to Henderson diagram"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; Defining streams implicitly"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"ones"
0 0 24 3 2 #" ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"ones"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";ones"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"add-streams"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"stream-map2"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"integers2"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"add-streams"
0 0 24 3 1 #" "
0 0 14 3 4 #"ones"
0 0 24 3 1 #" "
0 0 14 3 9 #"integers2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";(stream-ref integers 10)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"fibs2"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 11 #"cons-stream"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"add-streams"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"fibs2"
0 0 24 3 2 #") "
0 0 14 3 5 #"fibs2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";(stream-ref fibs 3)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"scale-stream"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #" "
0 0 14 3 6 #"factor"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"stream-map"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 6 #"factor"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 6 #"stream"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"double"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 12 #"scale-stream"
0 0 24 3 1 #" "
0 0 14 3 6 #"double"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"))) "
0 0 17 3 18 #"; 1 2 4 8 16 32 64"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; prime definitions revisited"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"smallest-divisor"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"find-divisor"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-divisor"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 12 #"test-divisor"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 12 #"test-divisor"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 8 #"divides?"
0 0 24 3 1 #" "
0 0 14 3 12 #"test-divisor"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 14 3 12 #"test-divisor"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-divisor"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 12 #"test-divisor"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"divides?"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"prime?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 16 #"smallest-divisor"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; contructing primes using implicit stream definitions"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"primes2"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 13 #"stream-filter"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 6 #"prime?"
0 0 24 3 2 #" ("
0 0 14 3 22 #"integers-starting-from"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"primes3"
0 0 24 3 2 #" ("
0 0 14 3 13 #"stream-filter"
0 0 24 3 1 #" "
0 0 14 3 6 #"prime?"
0 0 24 3 2 #" ("
0 0 14 3 22 #"integers-starting-from"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #"; agree - here it makes no differences.... unless we define a differ"
 #"ent predicate primes?"
) 0 0 24 29 1 #"\n"
0 0 17 3 94
(
 #"; this ones we chech by dividing only by primes, not by all numbers "
 #"less than sqaure root of n"
) 0 0 24 29 1 #"\n"
0 0 17 3 51 #"; thats why we have this initial cons-stream 2 ...."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"primes4"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 13 #"stream-filter"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 7 #"prime2?"
0 0 24 3 2 #" ("
0 0 14 3 22 #"integers-starting-from"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"prime2?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 14 3 2 #"ps"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 2 #"ps"
0 0 24 3 3 #")) "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 10 #"divisible?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 2 #"ps"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"ps"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 14 3 7 #"primes4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";(stream-ref primes2 100000) ; 10 sec"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";(stream-ref primes3 100000) ; 10 sec"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";(stream-ref primes4 100000) ; 4 sec"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";(stream-ref primes2 300000) ; 50 sec"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";(stream-ref primes3 300000) ; 50 sec"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";(stream-ref primes4 300000) ; 19 sec"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.53"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.53"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"add-streams2"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"stream-map2"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";(define s (cons-stream 1 (add-streams2 s s)))"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";(list (stream-ref s 0) (stream-ref s 1) (stream-ref s 2) (stream-re"
 #"f s 3) (stream-ref s 4))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.54"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.54"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"mul-streams"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"stream-map2"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"factorials"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"mul-streams"
0 0 24 3 1 #" "
0 0 14 3 10 #"factorials"
0 0 24 3 1 #" "
0 0 14 3 8 #"integers"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 137
(
 #";(list (stream-ref factorials 0) (stream-ref factorials 1) (stream-r"
 #"ef factorials 2) (stream-ref factorials 3) (stream-ref factorials 4)"
 #")"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.55"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.55"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"partial-sum"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 12 #"add-streams2"
0 0 24 3 1 #" "
0 0 14 3 11 #"partial-sum"
0 0 24 3 1 #" "
0 0 14 3 8 #"integers"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 142
(
 #";(list (stream-ref partial-sum 0) (stream-ref partial-sum 1) (stream"
 #"-ref partial-sum 2) (stream-ref partial-sum 3) (stream-ref partial-s"
 #"um 4))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; 0 1 2 3 4 5 6 7"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; partial sums 1 3 6 10 15 21"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.56"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.56"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"factor-2"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 12 #"scale-stream"
0 0 24 3 1 #" "
0 0 14 3 8 #"factor-2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"factor-3"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 12 #"scale-stream"
0 0 24 3 1 #" "
0 0 14 3 8 #"factor-3"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"factor-5"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 12 #"scale-stream"
0 0 24 3 1 #" "
0 0 14 3 8 #"factor-5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";(list (stream-ref factor-3 0) (stream-ref factor-3 1) (stream-ref f"
 #"actor-3 2) (stream-ref factor-3 3) (stream-ref factor-3 4))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";merge two streams and remove repetitions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"merge"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 12 #"stream-null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 2 #") "
0 0 14 3 2 #"s2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 12 #"stream-null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 2 #") "
0 0 14 3 2 #"s1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"s1car"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 5 #"s2car"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 5 #"s1car"
0 0 24 3 1 #" "
0 0 14 3 5 #"s2car"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 14 3 5 #"s1car"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 5 #"merge"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 14 3 2 #"s2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 (("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 5 #"s1car"
0 0 24 3 1 #" "
0 0 14 3 5 #"s2car"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 14 3 5 #"s2car"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 5 #"merge"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 14 3 5 #"s1car"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 5 #"merge"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 9 #")))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"S"
0 0 24 3 2 #" ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 5 #"merge"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"factor-2"
0 0 24 3 3 #") ("
0 0 14 3 5 #"merge"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"factor-3"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"factor-5"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";(list (stream-ref S 0) (stream-ref S 1) (stream-ref S 2) (stream-re"
 #"f S 3) (stream-ref S 4))"
) 0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";(list (stream-ref S 5) (stream-ref S 6) (stream-ref S 7) (stream-re"
 #"f S 8) (stream-ref S 9))"
) 0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #";(list (stream-ref S 10) (stream-ref S 11) (stream-ref S 12) (stream"
 #"-ref S 13) (stream-ref S 14))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.57"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.57"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 143
(
 #"; is it just O(n) with memo-proc'ed Fib as we are remembering all th"
 #"e additions leading to the final one instead of recomputing them eac"
 #"h time?"
) 0 0 24 29 1 #"\n"
0 0 17 3 98
(
 #"; what if no memo-proc? then it is 1+2+3+4+5+6 - sum of arithmetic s"
 #"eries (1+n)*n/2 = circa O(n^2)"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; but it appears there is even more slowness (exponential) it is O(f"
 #"i^n)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.58"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.58"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; Give an interpretation of the stream computed by the following"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"expand"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 3 #"den"
0 0 24 3 1 #" "
0 0 14 3 5 #"radix"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"quotient"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 5 #"radix"
0 0 24 3 2 #") "
0 0 14 3 3 #"den"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"expand"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 5 #"radix"
0 0 24 3 2 #") "
0 0 14 3 3 #"den"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 3 #"den"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 5 #"radix"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 103
(
 #"; (Quotient is a primitive that returns the integer quotient of two "
 #"integers.) e.g. (quotient 7 2) is 3"
) 0 0 24 29 1 #"\n"
0 0 17 3 100
(
 #"; What are the successive elements produced by (expand 1 7 10)? What"
 #" is produced by (expand 3 8 10)?"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"a2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"expand"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; 3 7 5 0 0 0 ..."
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #";(list (stream-ref a2 0) (stream-ref a2 1) (stream-ref a2 2) (stream"
 #"-ref a2 3) (stream-ref a2 4))"
) 0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #";(list (stream-ref a2 5) (stream-ref a2 6) (stream-ref a2 7) (stream"
 #"-ref a2 8) (stream-ref a2 9))"
) 0 0 24 29 1 #"\n"
0 0 17 3 102
(
 #";(list (stream-ref a2 10) (stream-ref a2 11) (stream-ref a2 12) (str"
 #"eam-ref a2 13) (stream-ref a2 14))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; 3 7 10"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; 2 7 10"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; 6 7 10"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; 4 7 10"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; 1 4 2 8 5 ..."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"a1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"expand"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #";(list (stream-ref a1 0) (stream-ref a1 1) (stream-ref a1 2) (stream"
 #"-ref a1 3) (stream-ref a1 4))"
) 0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #";(list (stream-ref a1 5) (stream-ref a1 6) (stream-ref a1 7) (stream"
 #"-ref a1 8) (stream-ref a1 9))"
) 0 0 24 29 1 #"\n"
0 0 17 3 102
(
 #";(list (stream-ref a1 10) (stream-ref a1 11) (stream-ref a1 12) (str"
 #"eam-ref a1 13) (stream-ref a1 14))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 143
(
 #"; this algo will be producing of stream of numbers which are quotien"
 #"ts of num*den, the latter being calculated as remainder of previous "
 #"num*den"
) 0 0 24 29 1 #"\n"
0 0 17 3 105
(
 #"; hnce for a1 it will produce numbers from 1 - 9 and then repeat its"
 #"elf (so kind of random generated 1-9)"
) 0 0 24 29 1 #"\n"
0 0 17 3 98
(
 #"; in a2 at som point the remainder becomes o, and hence all subseque"
 #"nt quotients will also be 0..."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.59"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.59"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;; PART 1 ;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";ones"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";integers"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"f-half"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"f-half"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"multiply-streams"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 16 #"multiply-streams"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"integrate-series0"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 14 3 16 #"multiply-streams"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 2 #" ("
0 0 14 3 6 #"f-half"
0 0 24 3 1 #" "
0 0 14 3 8 #"integers"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";(define a3 (integrate-series0 ones 3))"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";(define a4 (integrate-series0 integers 3))"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";(define a4 (multiply-streams a3 ones))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #";(list (stream-ref a3 0) (stream-ref a3 1) (stream-ref a3 2) (stream"
 #"-ref a3 3) (stream-ref a3 4))"
) 0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #";(list (stream-ref a4 0) (stream-ref a4 1) (stream-ref a4 2) (stream"
 #"-ref a4 3) (stream-ref a4 4))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;; PART 2 ;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; from part 1:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"integrate-series"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"multiply-streams"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 2 #" ("
0 0 14 3 6 #"f-half"
0 0 24 3 1 #" "
0 0 14 3 8 #"integers"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"exp-series"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 16 #"integrate-series"
0 0 24 3 1 #" "
0 0 14 3 10 #"exp-series"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 137
(
 #";(list (stream-ref exp-series 0) (stream-ref exp-series 1) (stream-r"
 #"ef exp-series 2) (stream-ref exp-series 3) (stream-ref exp-series 4)"
 #")"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 169
(
 #";Show how to generate the series for sine and cosine, starting from "
 #"the facts that the derivative of sine is cosine and the derivative o"
 #"f cosine is the negative of sine:"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"cosine-series"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 16 #"integrate-series"
0 0 24 3 2 #" ("
0 0 14 3 12 #"scale-stream"
0 0 24 3 1 #" "
0 0 14 3 11 #"sine-series"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"sine-series"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 16 #"integrate-series"
0 0 24 3 1 #" "
0 0 14 3 13 #"cosine-series"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";cosine-series"
0 0 24 29 1 #"\n"
0 0 17 3 181
(
 #";(list (stream-ref cosine-series 0) (stream-ref cosine-series 1) (st"
 #"ream-ref cosine-series 2) (stream-ref cosine-series 3) (stream-ref c"
 #"osine-series 4) (stream-ref cosine-series 5))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";sine-series"
0 0 24 29 1 #"\n"
0 0 17 3 169
(
 #";(list (stream-ref sine-series 0) (stream-ref sine-series 1) (stream"
 #"-ref sine-series 2) (stream-ref sine-series 3) (stream-ref sine-seri"
 #"es 4) (stream-ref sine-series 5))"
) 0 0 24 29 1 #"\n"
0 0 17 3 6 #";WOW!!"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.60"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.60"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"mul-series"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 11 #"add-streams"
0 0 24 3 2 #" ("
0 0 14 3 10 #"mul-series"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 12 #"scale-stream"
0 0 24 3 2 #" ("
0 0 14 3 10 #"mul-series"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 3 #")) "
0 0 21 3 2 #"-1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"summed"
0 0 24 3 2 #" ("
0 0 14 3 11 #"add-streams"
0 0 24 3 2 #" ("
0 0 14 3 10 #"mul-series"
0 0 24 3 1 #" "
0 0 14 3 13 #"cosine-series"
0 0 24 3 1 #" "
0 0 14 3 13 #"cosine-series"
0 0 24 3 3 #") ("
0 0 14 3 10 #"mul-series"
0 0 24 3 1 #" "
0 0 14 3 11 #"sine-series"
0 0 24 3 1 #" "
0 0 14 3 11 #"sine-series"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";(define summed (add-streams ones integers))"
0 0 24 29 1 #"\n"
0 0 17 3 139
(
 #";(list (stream-ref summed 0) (stream-ref summed 1) (stream-ref summe"
 #"d 2) (stream-ref summed 3) (stream-ref summed 4) (stream-ref summed "
 #"5))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";(define m1 (mul-series cosine-series cosine-series))"
0 0 24 29 1 #"\n"
0 0 17 3 115
(
 #";(list (stream-ref m1 0) (stream-ref m1 1) (stream-ref m1 2) (stream"
 #"-ref m1 3) (stream-ref m1 4) (stream-ref m1 5))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";(define m2 (scale-stream ones -1))"
0 0 24 29 1 #"\n"
0 0 17 3 115
(
 #";(list (stream-ref m2 0) (stream-ref m2 1) (stream-ref m2 2) (stream"
 #"-ref m2 3) (stream-ref m2 4) (stream-ref m2 5))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.61"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.61"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; mult from https://wizardbook.wordpress.com/2010/12/20/exercise-3-6"
 #"0/"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"mul-series2"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 11 #"add-streams"
0 0 24 3 2 #" ("
0 0 14 3 12 #"scale-stream"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 11 #"mul-series2"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 110
(
 #";(define summed2 (add-streams (mul-series2 cosine-series cosine-seri"
 #"es) (mul-series sine-series sine-series)))"
) 0 0 24 29 1 #"\n"
0 0 17 3 145
(
 #";(list (stream-ref summed2 0) (stream-ref summed2 1) (stream-ref sum"
 #"med2 2) (stream-ref summed2 3) (stream-ref summed2 4) (stream-ref su"
 #"mmed2 5))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"invert-series"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 12 #"scale-stream"
0 0 24 3 2 #" ("
0 0 14 3 11 #"mul-series2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 3 #") ("
0 0 14 3 13 #"invert-series"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 3 #")) "
0 0 21 3 2 #"-1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";(define inv (invert-series exp-series))"
0 0 24 29 1 #"\n"
0 0 17 3 121
(
 #";(list (stream-ref inv 0) (stream-ref inv 1) (stream-ref inv 2) (str"
 #"eam-ref inv 3) (stream-ref inv 4) (stream-ref inv 5))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";ex.3.62-skipped"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 14 3 12 #"3.62-skipped"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";3.5.3 Exploiting the Stream Paradigm"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 10 #"Exploiting"
0 0 24 3 1 #" "
0 0 14 3 3 #"the"
0 0 24 3 1 #" "
0 0 14 3 6 #"Stream"
0 0 24 3 1 #" "
0 0 14 3 8 #"Paradigm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"average"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"sqrt-improve"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"average"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"sqrt-stream"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"guesses"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 21 3 3 #"1.0"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-map"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"guess"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 12 #"sqrt-improve"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 7 #"guesses"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 7 #"guesses"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";(display-stream (sqrt-stream 2))"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";(stream-ref (sqrt-stream 2) 30)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"pi-summands"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.0"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"stream-map"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 11 #"pi-summands"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"partial-sums"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 11 #"add-streams"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 12 #"partial-sums"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"pi-stream"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"scale-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 12 #"partial-sums"
0 0 24 3 2 #" ("
0 0 14 3 11 #"pi-summands"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";(display-stream pi-stream)"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";(stream-ref pi-stream 150)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"euler-transform"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 2 #"s0"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 7 #"))     "
0 0 17 3 12 #"; S\342\202\231\342\202\213\342\202\201"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"s1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 7 #"))     "
0 0 17 3 6 #"; S\342\202\231"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"s2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 7 #")))    "
0 0 17 3 12 #"; S\342\202\231\342\202\212\342\202\201"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"s0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-2"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 2 #") "
0 0 14 3 2 #"s2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 15 #"euler-transform"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";(display-stream "
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; (euler-transform pi-stream))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";;; we create a stream of streams (a structure we\342\200\231ll call"
 #" a tableau) ;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-tableau"
0 0 24 3 1 #" "
0 0 14 3 9 #"transform"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-tableau"
0 0 24 3 1 #" "
0 0 14 3 9 #"transform"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 9 #"transform"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"accelerated-sequence"
0 0 24 3 1 #" "
0 0 14 3 9 #"transform"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"stream-map"
0 0 24 3 1 #" "
0 0 14 3 10 #"stream-car"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 12 #"make-tableau"
0 0 24 3 1 #" "
0 0 14 3 9 #"transform"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";(display-stream "
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; (accelerated-sequence euler-transform"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";                       pi-stream))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";test of speed:"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";(stream-ref pi-stream 6)"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";(stream-ref (euler-transform pi-stream) 6)"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";(stream-ref (accelerated-sequence euler-transform"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";                       pi-stream) 6) ; this is so good that after 1"
 #"0th is returns +nan.0"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.63"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.63"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"sqrt-stream-PREV"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"guesses"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 21 3 3 #"1.0"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-map"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"guess"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 12 #"sqrt-improve"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 7 #"guesses"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 7 #"guesses"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"sqrt-stream-SUGG"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 17 3 57
#"; this version stips out the overarching \"define guesses\""
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 3 #"1.0"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-map"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"guess"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 12 #"sqrt-improve"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 16 #"sqrt-stream-SUGG"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";(stream-ref (sqrt-stream-PREV 2) 4)"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";(stream-ref (sqrt-stream-SUGG 2) 4)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 90
(
 #"; is this about memory and how by calling the headline definition sq"
 #"rt-stream all the time"
) 0 0 24 29 1 #"\n"
0 0 17 3 61
#"; we are keep adding new enironments instead, wasting memory?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.64"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.64"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 94
(
 #"; Write a procedure stream-limit that takes as arguments a stream an"
 #"d a number (the tolerance)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"stream-limit"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 3 #"abs"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-car"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #")))) "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-car"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"stream-limit"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 14 3 1 #"t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"sqrt-sicp"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 9 #"tolerance"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"stream-limit"
0 0 24 3 2 #" ("
0 0 14 3 11 #"sqrt-stream"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 9 #"tolerance"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(sqrt-sicp 2 0.1)"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";(sqrt-sicp 2 0.01)"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";(sqrt-sicp 2 0.001)"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";(sqrt-sicp 2 0.000001)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.65"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.65"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"ln2-summands"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.0"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"stream-map"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 12 #"ln2-summands"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"ln2-stream"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"scale-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 12 #"partial-sums"
0 0 24 3 2 #" ("
0 0 14 3 12 #"ln2-summands"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 17 3 21 #"; no need for scaling"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";(display-stream pi-stream)"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";(stream-ref ln2-stream 150)"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";(list (stream-ref ln2-stream 0) (stream-ref ln2-stream 1) (stream-r"
 #"ef ln2-stream 2)"
) 0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";      (stream-ref ln2-stream 3) (stream-ref ln2-stream 4) (stream-r"
 #"ef ln2-stream 5)"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";      (stream-ref ln2-stream 6) (stream-ref ln2-stream 7) (stream-r"
 #"ef ln2-stream 8))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";test of speed:"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";(stream-ref ln2-stream 6)"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";(stream-ref (euler-transform ln2-stream) 6)"
0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #";(stream-ref (accelerated-sequence euler-transform ln2-stream) 6) ; "
 #"accurate already!!"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";Infinite streams of pairs"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 8 #"Infinite"
0 0 24 3 1 #" "
0 0 14 3 7 #"streams"
0 0 24 3 1 #" "
0 0 14 3 2 #"of"
0 0 24 3 1 #" "
0 0 14 3 5 #"pairs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"interleave"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"stream-null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 2 #"s2"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 10 #"interleave"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pairs"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"interleave"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"stream-map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"pairs"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-pairs"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pairs"
0 0 24 3 1 #" "
0 0 14 3 8 #"integers"
0 0 24 3 1 #" "
0 0 14 3 8 #"integers"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"pair-primes"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"stream-filter"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pair"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"prime?"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 9 #"int-pairs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; pairs such that sum of the two ints are prime:"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";(list (stream-ref pair-primes 0) (stream-ref pair-primes 1) (stream"
 #"-ref pair-primes 2)"
) 0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";      (stream-ref pair-primes 3) (stream-ref pair-primes 4) (stream"
 #"-ref pair-primes 5)"
) 0 0 24 29 1 #"\n"
0 0 17 3 88
(
 #";      (stream-ref pair-primes 6) (stream-ref pair-primes 7) (stream"
 #"-ref pair-primes 8))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.66"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.66"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #";Examine the stream (pairs integers integers). Can you make any gene"
 #"ral comments about"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; the order in which the pairs are placed into the stream? For examp"
 #"le,"
) 0 0 24 29 1 #"\n"
0 0 17 3 98
(
 #"; approximately how many pairs precede the pair (1, 100)? the pair ("
 #"99, 100)? the pair (100, 100)?"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";(If you can make precise mathematical statements here, all the bett"
 #"er."
) 0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #"; But feel free to give more qualitative answers if you find yoursel"
 #"f getting bogged down.)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-pairs"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-pairs"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #" ) ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-pairs"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-pairs"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-pairs"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #" ) ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-pairs"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-pairs"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-pairs"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 4 #" ) ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-pairs"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-pairs"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-pairs"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-pairs"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-pairs"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-pairs"
0 0 24 3 1 #" "
0 0 21 3 2 #"13"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-pairs"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-pairs"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-pairs"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-pairs"
0 0 24 3 1 #" "
0 0 21 3 2 #"17"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-pairs"
0 0 24 3 1 #" "
0 0 21 3 2 #"18"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-pairs"
0 0 24 3 1 #" "
0 0 21 3 2 #"19"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"int-pairs"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 102
(
 #"; '(1:(1 1) 2:(1 2) 3:(2 2) 4:(1 3) 5:(2 3) 6:(1 4) 7:(3 3) 8:(1 5) "
 #"9:(2 4) 10:(1 6) 11:(3 4) 12:(1 7)"
) 0 0 24 29 1 #"\n"
0 0 17 3 90
(
 #";   13:(2 5) 14:(1 8) 15:(4 4) 16:(1 9) 17:(2 6) 18:(1 10) 19: (3 5)"
 #" 20: (1 11) 21: (2 7))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 132
(
 #"; Qualititative is that the top row will be done most frequently, as"
 #" we can see from elts 2, 4, 6, ... i.e. (12) (13) (14) (15) ...."
) 0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #"; so they will show at (x y) -> then  (1 1)(1 2)(1 3)(1 4)(1 5)(1 6)"
 #"(1 7) is 1 2 4 6 8 10"
) 0 0 24 29 1 #"\n"
0 0 17 3 18 #"; FOR x=1 & y=1: 1"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; FOR x=1 & y>1: 2*x*(y-1)"
0 0 24 29 1 #"\n"
0 0 17 3 111
(
 #"; the iunterleaved one is another triangle, so then top row of that "
 #"will be prioritise in the alternating ones,"
) 0 0 24 29 1 #"\n"
0 0 17 3 42 #"; i.e. ended up being shown every 4th time"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; x=2 y=2: 11 22 33 44 55 => 1,3,7,15"
0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";                                                                   "
 #"                      y=x  y=x+1  y=x+2  y=x+3"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";                                                                   "
 #"               "
) 0 0 24 29 1 #"\n"
0 0 17 3 113
(
 #"; and the first row  (1 1) (1 2) (1 3) (1 4) (1 5) (1 6) is 1 , 2 , "
 #"4 , 6 , 8 , 10 so x=1:  1    +1     +2     +2"
) 0 0 24 29 1 #"\n"
0 0 17 3 113
(
 #"; and the second row (2 2) (2 3) (2 4) (2 5) (2 6) (2 7) is 3 , 5 , "
 #"9 , 13, 17, 21 so x=2: +2    +2     +4     +4"
) 0 0 24 29 1 #"\n"
0 0 17 3 113
(
 #"; and the third row  (3 3) (3 4) (3 5) (3 6) (3 7) (3 8) is 7 , 11, "
 #"19, 27, 35, 43 so x=3: +4    +4     +8     +8"
) 0 0 24 29 1 #"\n"
0 0 17 3 113
(
 #"; and the fourth row (4 4) (4 5) (4 6) (4 7) (4 8) (4 9) is 15, 23, "
 #"39, 55, 71, 87 so x=4: +8    +8    +16    +16"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";      y=x  y=x+1  y=x+2  y=x+3"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; x=1:  1    +1     +2     +2"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; x=2: +2    +2     +4     +4"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; x=3: +4    +4     +8     +8"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; x=4: +8    +8    +16    +16  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";      y=x  y=x+1  y=x+2  y=x+3"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; x=1:  1     2      4      6"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; x=2:  3     5      9     13"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; x=3:  7    11     19     27"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; x=4: 15    23     39     55  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";for x=y  : [(2^x)-1]"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";for x=y-1: [(2*x)+1]"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";for x<y-1: (y-x+1)*[(2^x)-1]"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";for all:   [(2^x)-1] + {(y-x)*(2^x)}-{2^(x-1)}"
0 0 24 29 1 #"\n"
0 0 17 3 100
(
 #"; e.g. (x = 4, y = 6), should be 39, is it? [(2^4)-1]+{(6-4)*(2^4)}-"
 #"{2^(4-1)} = 15 + 32 - 8 = 39 ok!"
) 0 0 24 29 1 #"\n"
0 0 17 3 31 #"; can we simplify this formula?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"calc"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";(calc 2 7)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";(map"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; (lambda(pair)"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";   (calc (car pair) (cadr pair)))"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; lista)"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; ok - not working for some, but good enough for this purpose."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; 2^(x-1)   or    2^(x)"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; for (y-x) if:  0 -> 0; 1 -> 1 and 2,3,4 -> 2 "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; e.g. (x=3 y=3) -> 7  (agreed to formula)"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; e.g. (x=4 y=5) -> 23 (agreed to formula)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";ex.3.67 <- 01 AUg 2019"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.67"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"pairs2"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"interleave"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"interleave"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"stream-map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"pairs"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"stream-map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"int-pairs2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"pairs2"
0 0 24 3 1 #" "
0 0 14 3 8 #"integers"
0 0 24 3 1 #" "
0 0 14 3 8 #"integers"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"lista2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"int-pairs2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"int-pairs2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #" ) ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"int-pairs2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"int-pairs2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"int-pairs2"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #" ) ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"int-pairs2"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"int-pairs2"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"int-pairs2"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 4 #" ) ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"int-pairs2"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"int-pairs2"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"int-pairs2"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"int-pairs2"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"int-pairs2"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"int-pairs2"
0 0 24 3 1 #" "
0 0 21 3 2 #"13"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"int-pairs2"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"int-pairs2"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"int-pairs2"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"int-pairs2"
0 0 24 3 1 #" "
0 0 21 3 2 #"17"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"int-pairs2"
0 0 24 3 1 #" "
0 0 21 3 2 #"18"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"int-pairs2"
0 0 24 3 1 #" "
0 0 21 3 2 #"19"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"int-pairs2"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";lista2"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.68"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.68"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"pairs3"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #") "
0 0 17 3 76
(
 #"; this will not print anything - just loop without stopping until ou"
 #"t of mem"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"interleave"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"stream-map"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"pairs3"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"pairs-original"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"interleave"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"stream-map"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"pairs-original"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";(define int-pairs3 (pairs3 integers integers))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 101
(
 #";(define lista3 (list (stream-ref int-pairs3 0) (stream-ref int-pair"
 #"s3 1 ) (stream-ref int-pairs3 2 )"
) 0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #";      (stream-ref int-pairs3 3) (stream-ref int-pairs3 4 ) (stream-"
 #"ref int-pairs3 5 )"
) 0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #";      (stream-ref int-pairs3 6) (stream-ref int-pairs3 7 ) (stream-"
 #"ref int-pairs3 8 )"
) 0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #";      (stream-ref int-pairs3 9) (stream-ref int-pairs3 10) (stream-"
 #"ref int-pairs3 11)"
) 0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";      (stream-ref int-pairs3 12) (stream-ref int-pairs3 13) (stream"
 #"-ref int-pairs3 14)"
) 0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";      (stream-ref int-pairs3 15) (stream-ref int-pairs3 16) (stream"
 #"-ref int-pairs3 17)"
) 0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";      (stream-ref int-pairs3 18) (stream-ref int-pairs3 19) (stream"
 #"-ref int-pairs3 20)))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; this is because the interleave has got recursive call, and so will"
 #" need that at least"
) 0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; first element. but there is no first element in the revised versio"
 #"n so the calls will"
) 0 0 24 29 1 #"\n"
0 0 17 3 65
#"; go in circles without second part of interleave being executed."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.69"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.69"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";Write a procedure triples that takes three infinite streams, S, T, "
 #"and U, and produces"
) 0 0 24 29 1 #"\n"
0 0 17 3 90
(
 #"; the stream of triples (S"
 #"i,Tj,Uk) such that i\342\211\244j\342\211\244k. Use triples to gener"
 #"ate the stream"
) 0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #"; of all Pythagorean triples of positive integers, i.e., the triples"
 #" (i,j,k) such that i\342\211\244j"
) 0 0 24 29 1 #"\n"
0 0 17 3 15 #"; and i2+j2=k2."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"triples"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"interleave"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"stream-map"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"pairs"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"triples"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"int-triples"
0 0 24 3 2 #" ("
0 0 14 3 7 #"triples"
0 0 24 3 1 #" "
0 0 14 3 8 #"integers"
0 0 24 3 1 #" "
0 0 14 3 8 #"integers"
0 0 24 3 1 #" "
0 0 14 3 8 #"integers"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";(define int-triples (cons-stream (list 1 2 3) (cons-stream (list 3 "
 #"4 5) '())))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"pyth-triple"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"stream-filter"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"triple"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"triple"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"expt"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 6 #"triple"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"expt"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 6 #"triple"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 11 #"int-triples"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"p-t-list"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 11 #"pyth-triple"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 11 #"pyth-triple"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #" ) ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 11 #"pyth-triple"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";p-t-list"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.70"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.70"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(define factor-2 "
0 0 24 29 1 #"\n"
0 0 17 3 45 #";  (cons-stream 1 (scale-stream factor-2 2)))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(define factor-3 "
0 0 24 29 1 #"\n"
0 0 17 3 45 #";  (cons-stream 1 (scale-stream factor-3 3)))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(define factor-5 "
0 0 24 29 1 #"\n"
0 0 17 3 45 #";  (cons-stream 1 (scale-stream factor-5 5)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";(list (stream-ref factor-3 0) (stream-ref factor-3 1) (stream-ref f"
 #"actor-3 2) (stream-ref factor-3 3) (stream-ref factor-3 4))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";merge two streams and remove repetitions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"merge-weighted"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 1 #" "
0 0 14 3 9 #"weight-fn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 12 #"stream-null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 2 #") "
0 0 14 3 2 #"s2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 12 #"stream-null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 2 #") "
0 0 14 3 2 #"s1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"s1car"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 5 #"s2car"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 9 #"weight-fn"
0 0 24 3 1 #" "
0 0 14 3 5 #"s1car"
0 0 24 3 3 #") ("
0 0 14 3 9 #"weight-fn"
0 0 24 3 1 #" "
0 0 14 3 5 #"s2car"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 5 #"s1car"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 14 #"merge-weighted"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 2 #") "
0 0 14 3 2 #"s2"
0 0 24 3 1 #" "
0 0 14 3 9 #"weight-fn"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   (("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 9 #"weight-fn"
0 0 24 3 1 #" "
0 0 14 3 5 #"s1car"
0 0 24 3 3 #") ("
0 0 14 3 9 #"weight-fn"
0 0 24 3 1 #" "
0 0 14 3 5 #"s2car"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 5 #"s2car"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 14 #"merge-weighted"
0 0 24 3 1 #" "
0 0 14 3 2 #"s1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"s2"
0 0 24 3 2 #") "
0 0 14 3 9 #"weight-fn"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 17 3 6 #";(else"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 17 3 15 #"; (cons-stream "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 17 3 8 #";  s1car"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 17 3 18 #";  (merge-weighted"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 17 3 19 #";   (stream-cdr s1)"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 17 3 19 #";   (stream-cdr s2)"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 17 3 15 #";  weight-fn)))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                   )))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"weight-1"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"weight-2"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";(define ordered-1 ;that's my weighted pairs"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";  (merge-weighted int-pairs weight-1))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"weighted-pairs"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 6 #"weight"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 14 #"merge-weighted"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"stream-map"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 14 #"weighted-pairs"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 6 #"weight"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 6 #"weight"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";(define int-cond1 (weighted-pairs integers integers weight-1))"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";(define int-cond2 (weighted-pairs integers integers weight-2))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";(list (stream-ref int-pairs 0) (stream-ref int-pairs 1 ) (stream-re"
 #"f int-pairs 2 )"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";      (stream-ref int-pairs 3) (stream-ref int-pairs 4 ) (stream-re"
 #"f int-pairs 5 )"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";      (stream-ref int-pairs 6) (stream-ref int-pairs 7 ) (stream-re"
 #"f int-pairs 8 )"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";      (stream-ref int-pairs 9) (stream-ref int-pairs 10) (stream-re"
 #"f int-pairs 11)"
) 0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";      (stream-ref int-pairs 12) (stream-ref int-pairs 13) (stream-r"
 #"ef int-pairs 14)"
) 0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";      (stream-ref int-pairs 15) (stream-ref int-pairs 16) (stream-r"
 #"ef int-pairs 17)"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";      (stream-ref int-pairs 18) (stream-ref int-pairs 19) (stream-r"
 #"ef int-pairs 20))"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";(list (stream-ref int-cond1 0) (stream-ref int-cond1 1 ) (stream-re"
 #"f int-cond1 2 )"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";      (stream-ref int-cond1 3) (stream-ref int-cond1 4 ) (stream-re"
 #"f int-cond1 5 )"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";      (stream-ref int-cond1 6) (stream-ref int-cond1 7 ) (stream-re"
 #"f int-cond1 8 )"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";      (stream-ref int-cond1 9) (stream-ref int-cond1 10) (stream-re"
 #"f int-cond1 11)"
) 0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";      (stream-ref int-cond1 12) (stream-ref int-cond1 13) (stream-r"
 #"ef int-cond1 14)"
) 0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";      (stream-ref int-cond1 15) (stream-ref int-cond1 16) (stream-r"
 #"ef int-cond1 17)"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";      (stream-ref int-cond1 18) (stream-ref int-cond1 19) (stream-r"
 #"ef int-cond1 20))"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";(define check"
0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";  (list (stream-ref int-cond2 0) (stream-ref int-cond2 1 ) (stream-"
 #"ref int-cond2 2 )"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";        (stream-ref int-cond2 3) (stream-ref int-cond2 4 ) (stream-"
 #"ref int-cond2 5 )"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";        (stream-ref int-cond2 6) (stream-ref int-cond2 7 ) (stream-"
 #"ref int-cond2 8 )"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";        (stream-ref int-cond2 9) (stream-ref int-cond2 10) (stream-"
 #"ref int-cond2 11)"
) 0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #";        (stream-ref int-cond2 12) (stream-ref int-cond2 13) (stream"
 #"-ref int-cond2 14)"
) 0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #";        (stream-ref int-cond2 15) (stream-ref int-cond2 16) (stream"
 #"-ref int-cond2 17)"
) 0 0 24 29 1 #"\n"
0 0 17 3 88
(
 #";        (stream-ref int-cond2 18) (stream-ref int-cond2 19) (stream"
 #"-ref int-cond2 20)))"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";(map"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; (lambda (pair)"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";   (weight-2 pair))"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; check)"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; ok - works!"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.71"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.71"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"ramanujan-weight"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 4 #"expt"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";(define r-numbers (weighted-pairs integers integers ramanujan-weigh"
 #"t))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"stream-until"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #" "
0 0 14 3 2 #"to"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #" "
0 0 14 3 3 #"now"
0 0 24 3 1 #" "
0 0 14 3 5 #"found"
0 0 24 3 1 #" "
0 0 14 3 5 #"mem-r"
0 0 24 3 1 #" "
0 0 14 3 5 #"mem-p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"old-r"
0 0 24 3 1 #" "
0 0 14 3 5 #"mem-r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"old-p"
0 0 24 3 1 #" "
0 0 14 3 5 #"mem-p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"mem-r"
0 0 24 3 2 #" ("
0 0 14 3 16 #"ramanujan-weight"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #" "
0 0 14 3 3 #"now"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"mem-p"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #" "
0 0 14 3 3 #"now"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"found"
0 0 24 3 1 #" "
0 0 14 3 2 #"to"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"old-r"
0 0 24 3 1 #" "
0 0 14 3 5 #"mem-r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"now"
0 0 24 3 1 #" "
0 0 14 3 5 #"old-p"
0 0 24 3 1 #" "
0 0 14 3 5 #"mem-p"
0 0 24 3 1 #" "
0 0 14 3 5 #"mem-r"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"now"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"found"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 5 #"mem-r"
0 0 24 3 1 #" "
0 0 14 3 5 #"mem-p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"now"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 5 #"found"
0 0 24 3 1 #" "
0 0 14 3 5 #"mem-r"
0 0 24 3 1 #" "
0 0 14 3 5 #"mem-p"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";(stream-until r-numbers 5)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; ((61 (1 12) (9 10) 1729)"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";  (111 (2 16) (9 15) 4104)"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";  (250 (2 24) (18 20) 13832)"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";  (331 (10 27) (19 24) 20683)"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";  (449 (4 32) (18 30) 32832))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.72"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.72"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"squares-weight"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"expt"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";(define s-numbers (weighted-pairs integers integers squares-weight)"
 #")"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";(define (stream-until2 stream to)"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";  (define (iter stream now found mem-s mem-p mem-ss mem-pp)"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";    (let ((old-s mem-s)"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";          (old-p mem-p)"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";          (old-ss mem-ss)"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";          (old-pp mem-pp)"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";          (mem-s (squares-weight (stream-ref stream now)))"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";          (mem-p (stream-ref stream now)))"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";      (if (= found to)"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";          '()"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";          (if (= old-s old-ss mem-s)"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";               (cons (list now old-pp old-p mem-p mem-s) "
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #";                     (iter stream (+ now 1) (+ found 1) mem-s mem-p"
 #" old-s old-p))"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";               (iter stream (+ now 1) found mem-s mem-p old-s old-p"
 #")))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 19 #";  (iter stream 0 0"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";        0 '()"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";        0 '()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";(stream-until2 s-numbers 5)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";'((125 (1 18) (6 17) (10 15) 325)"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";  (165 (5 20) (8 19) (13 16) 425)"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";  (252 (5 25) (11 23) (17 19) 650)"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";  (281 (7 26) (10 25) (14 23) 725)"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";  (327 (2 29) (13 26) (19 22) 845))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";Streams as signals"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"Streams"
0 0 24 3 1 #" "
0 0 14 3 2 #"as"
0 0 24 3 1 #" "
0 0 14 3 7 #"signals"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"integral"
0 0 24 3 1 #" "
0 0 14 3 9 #"integrand"
0 0 24 3 1 #" "
0 0 14 3 13 #"initial-value"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"int"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 13 #"initial-value"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 11 #"add-streams"
0 0 24 3 2 #" ("
0 0 14 3 12 #"scale-stream"
0 0 24 3 1 #" "
0 0 14 3 9 #"integrand"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"int"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 3 #"int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.73"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.73"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 2 #"RC"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 1 #" "
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"initial"
0 0 24 3 1 #" "
0 0 14 3 9 #"integrand"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"add-streams"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 12 #"scale-stream"
0 0 24 3 1 #" "
0 0 14 3 9 #"integrand"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 7 #")      "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 8 #"integral"
0 0 24 3 2 #" ("
0 0 14 3 12 #"scale-stream"
0 0 24 3 1 #" "
0 0 14 3 9 #"integrand"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"C"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 7 #"initial"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 2 #"dt"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"RC1"
0 0 24 3 2 #" ("
0 0 14 3 2 #"RC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";RC1"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";(stream-ref (RC1 0.2 integers) 0)"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";(stream-ref (RC1 0.2 integers) 1)"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";(stream-ref (RC1 0.2 integers) 2)"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";(stream-ref (RC1 0.2 integers) 3)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.74"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.74"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"sign-change-detector"
0 0 24 3 1 #" "
0 0 14 3 4 #"curr"
0 0 24 3 1 #" "
0 0 14 3 4 #"prev"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 4 #"curr"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 4 #"prev"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #"  "
0 0 14 3 4 #"curr"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 1 #"<"
0 0 24 3 2 #"  "
0 0 14 3 4 #"prev"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"and"
0 0 24 3 3 #"  ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 4 #"curr"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 1 #"<"
0 0 24 3 2 #"  "
0 0 14 3 4 #"prev"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))  "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 3 #"and"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"<"
0 0 24 3 2 #"  "
0 0 14 3 4 #"curr"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 4 #"prev"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 21 3 2 #"-1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"make-zero-crossings"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 12 #"input-stream"
0 0 24 3 1 #" "
0 0 14 3 10 #"last-value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 20 #"sign-change-detector"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 12 #"input-stream"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 10 #"last-value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 19 #"make-zero-crossings"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 12 #"input-stream"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 12 #"input-stream"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-my-stream"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 14 #"make-my-stream"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"show-stream"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #" "
0 0 14 3 2 #"to"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #" "
0 0 14 3 3 #"now"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"stream-null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 3 #"now"
0 0 24 3 1 #" "
0 0 14 3 2 #"to"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"iter"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"now"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"sense-data"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-my-stream"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"-0.1"
0 0 24 3 1 #" "
0 0 21 3 2 #"-2"
0 0 24 3 1 #" "
0 0 21 3 2 #"-3"
0 0 24 3 1 #" "
0 0 21 3 2 #"-2"
0 0 24 3 1 #" "
0 0 21 3 4 #"-0.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"zero-crossings"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"make-zero-crossings"
0 0 24 3 1 #" "
0 0 14 3 10 #"sense-data"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";(show-stream zero-crossings 11)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";(define zero-crossings2"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";  (stream-map2 sign-change-detector "
0 0 24 29 1 #"\n"
0 0 17 3 39 #";              (stream-cdr sense-data) "
0 0 24 29 1 #"\n"
0 0 17 3 27 #";              sense-data))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";(show-stream zero-crossings2 10)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.75"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.75"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";(define (make-zero-crossingsNEW "
0 0 24 29 1 #"\n"
0 0 17 3 34 #";         input-stream last-value)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";  (let ((avpt "
0 0 24 29 1 #"\n"
0 0 17 3 42 #";         (/ (+ (stream-car input-stream) "
0 0 24 29 1 #"\n"
0 0 17 3 28 #";               last-value) "
0 0 24 29 1 #"\n"
0 0 17 3 17 #";            2)))"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";    (cons-stream "
0 0 24 29 1 #"\n"
0 0 17 3 44 #";     (sign-change-detector avpt last-value)"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";     (make-zero-crossingsNEW "
0 0 24 29 1 #"\n"
0 0 17 3 41 #";      (stream-cdr input-stream) avpt))))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";(define zero-crossingsNEW "
0 0 24 29 1 #"\n"
0 0 17 3 41 #";  (make-zero-crossingsNEW sense-data 0))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";(define (make-zero-crossingsSOL input-stream last-value last-avg)"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";  (let ((avpt (/ (+ (stream-car input-stream) last-value) 2)))"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";    (cons-stream (sign-change-detector avpt last-avg)"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";                 (make-zero-crossingsSOL (stream-cdr input-stream)"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";                                      (stream-car input-stream)"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";                                      avpt))))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 24 29 1 #"\n"
0 0 17 3 33 #";(define smoothed-zero-crossings "
0 0 24 29 1 #"\n"
0 0 17 3 38 #";  (make-zero-crossingsSOL sense-data "
0 0 24 29 1 #"\n"
0 0 17 3 25 #";                       0"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";                       0))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";(show-stream zero-crossings 11)"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";(show-stream zero-crossingsNEW 11)"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";(show-stream smoothed-zero-crossings 11)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";(define sense-data2 (make-my-stream (list 1 2 1.5 1 0.5 -0.1 -2 -3 "
 #"-2 1.5 -2 3 4)))"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";(define zero-crossings_old "
0 0 24 29 1 #"\n"
0 0 17 3 42 #";  (make-zero-crossingsNEW sense-data2 0))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";(define smoothed-zero-crossings_new "
0 0 24 29 1 #"\n"
0 0 17 3 38 #";  (make-zero-crossingsSOL sense-data2"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";                       0"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";                       0))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";(show-stream zero-crossings_old 11)"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";(show-stream smoothed-zero-crossings_new 11)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.76"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.76"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"sense-data3"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-my-stream"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"-0.1"
0 0 24 3 1 #" "
0 0 21 3 2 #"-2"
0 0 24 3 1 #" "
0 0 21 3 2 #"-3"
0 0 24 3 1 #" "
0 0 21 3 2 #"-2"
0 0 24 3 1 #" "
0 0 21 3 4 #"-0.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"make-zero-crossings75"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 12 #"input-stream"
0 0 24 3 1 #" "
0 0 14 3 10 #"last-value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"avpt"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 12 #"input-stream"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 10 #"last-value"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 20 #"sign-change-detector"
0 0 24 3 1 #" "
0 0 14 3 4 #"avpt"
0 0 24 3 1 #" "
0 0 14 3 10 #"last-value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 21 #"make-zero-crossings75"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 12 #"input-stream"
0 0 24 3 2 #") "
0 0 14 3 4 #"avpt"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"zero-crossings75"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 21 #"make-zero-crossings75"
0 0 24 3 1 #" "
0 0 14 3 11 #"sense-data3"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"smooth"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 14 3 12 #"input-stream"
0 0 24 3 1 #" "
0 0 14 3 10 #"last-value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 12 #"input-stream"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 16 #"the-empty-stream"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"avpt"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 12 #"input-stream"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 10 #"last-value"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 14 3 4 #"avpt"
0 0 24 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 12 #"input-stream"
0 0 24 3 3 #") ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 12 #"input-stream"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";(define smoothed-sense-data"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";  (smooth sense-data3))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #";(show-stream smoothed-sense-data 11) ;ok works - take average of tw"
 #"o successive items in stream"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"make-zero-crossings76"
0 0 24 3 1 #" "
0 0 14 3 12 #"input-stream"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #" "
0 0 14 3 10 #"last-value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"cons-stream"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 20 #"sign-change-detector"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 10 #"last-value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"iter"
0 0 24 3 2 #" ("
0 0 14 3 6 #"smooth"
0 0 24 3 1 #" "
0 0 14 3 12 #"input-stream"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"zero-crossings76"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 21 #"make-zero-crossings76"
0 0 24 3 1 #" "
0 0 14 3 11 #"sense-data3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";(show-stream sense-data3 11)"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";(show-stream zero-crossings75 11)"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";(show-stream zero-crossings76 11)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";3.5.4Streams and Delayed Evaluation"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"3.5.4"
0 0 24 3 1 #" "
0 0 14 3 7 #"Streams"
0 0 24 3 1 #" "
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 7 #"Delayed"
0 0 24 3 1 #" "
0 0 14 3 10 #"Evaluation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"integrall"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 17 #"delayed-integrand"
0 0 24 3 1 #" "
0 0 14 3 13 #"initial-value"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"int"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 13 #"initial-value"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"integrand"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"force"
0 0 24 3 1 #" "
0 0 14 3 17 #"delayed-integrand"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 11 #"add-streams"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"scale-stream"
0 0 24 3 1 #" "
0 0 14 3 9 #"integrand"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 3 #"int"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 3 #"int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"solve"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 9 #"integrall"
0 0 24 3 1 #" "
0 0 14 3 2 #"dy"
0 0 24 3 1 #" "
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"dy"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-map"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"solvee"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 9 #"integrall"
0 0 24 3 2 #" ("
0 0 15 3 5 #"delay"
0 0 24 3 1 #" "
0 0 14 3 2 #"dy"
0 0 24 3 2 #") "
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"dy"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-map"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";(stream-ref "
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; (solvee (lambda (y) y) 1 0.001) 1000)"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";2.716924 - works in Racket!"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.77"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.77"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"integralo"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 9 #"integrand"
0 0 24 3 1 #" "
0 0 14 3 13 #"initial-value"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 13 #"initial-value"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"stream-null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"integrand"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 16 #"the-empty-stream"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 9 #"integralo"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"integrand"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 9 #"integrand"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 13 #"initial-value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 2 #"dt"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";but the above needs to have delays added in to work as above - try "
 #"it!"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"integral-rev"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 17 #"delayed-integrand"
0 0 24 3 1 #" "
0 0 14 3 13 #"initial-value"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 13 #"initial-value"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"integrand"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"force"
0 0 24 3 1 #" "
0 0 14 3 17 #"delayed-integrand"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"stream-null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"integrand"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 16 #"the-empty-stream"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 12 #"integral-rev"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 5 #"delay"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"integrand"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 9 #"integrand"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 13 #"initial-value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 2 #"dt"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"solve-rev"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 12 #"integral-rev"
0 0 24 3 2 #" ("
0 0 15 3 5 #"delay"
0 0 24 3 1 #" "
0 0 14 3 2 #"dy"
0 0 24 3 2 #") "
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"dy"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-map"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";(stream-ref "
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; (solve-rev (lambda (y) y) 1 0.001) 1000)"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";2.716924 - works in Racket again!"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.78"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.78"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"solve-2d"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 14 3 3 #"dy0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"integral-rev"
0 0 24 3 2 #" ("
0 0 15 3 5 #"delay"
0 0 24 3 1 #" "
0 0 14 3 2 #"dy"
0 0 24 3 2 #") "
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"dy"
0 0 24 3 2 #" ("
0 0 14 3 12 #"integral-rev"
0 0 24 3 2 #" ("
0 0 15 3 5 #"delay"
0 0 24 3 1 #" "
0 0 14 3 3 #"ddy"
0 0 24 3 2 #") "
0 0 14 3 3 #"dy0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"ddy"
0 0 24 3 2 #" ("
0 0 14 3 11 #"add-streams"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"scale-stream"
0 0 24 3 1 #" "
0 0 14 3 2 #"dy"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"scale-stream"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.79"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.79"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"solve-2d-gen"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 14 3 3 #"dy0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"integral-rev"
0 0 24 3 2 #" ("
0 0 15 3 5 #"delay"
0 0 24 3 1 #" "
0 0 14 3 2 #"dy"
0 0 24 3 2 #") "
0 0 14 3 2 #"y0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"dy"
0 0 24 3 2 #" ("
0 0 14 3 12 #"integral-rev"
0 0 24 3 2 #" ("
0 0 15 3 5 #"delay"
0 0 24 3 1 #" "
0 0 14 3 3 #"ddy"
0 0 24 3 2 #") "
0 0 14 3 3 #"dy0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"ddy"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-map"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 2 #"dy"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";with some help from wizard solutions"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";https://wizardbook.wordpress.com/2010/12/23/exercise-3-79/"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.80"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.80"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"RLC"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 1 #" "
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"vC0"
0 0 24 3 1 #" "
0 0 14 3 3 #"iL0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"vC"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"integral-rev"
0 0 24 3 2 #" ("
0 0 15 3 5 #"delay"
0 0 24 3 1 #" "
0 0 14 3 3 #"dvC"
0 0 24 3 2 #") "
0 0 14 3 3 #"vC0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"iL"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"integral-rev"
0 0 24 3 2 #" ("
0 0 15 3 5 #"delay"
0 0 24 3 1 #" "
0 0 14 3 3 #"diL"
0 0 24 3 2 #") "
0 0 14 3 3 #"iL0"
0 0 24 3 1 #" "
0 0 14 3 2 #"dt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"dvC"
0 0 24 3 2 #" ("
0 0 14 3 12 #"scale-stream"
0 0 24 3 1 #" "
0 0 14 3 2 #"iL"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 14 3 1 #"C"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"diL"
0 0 24 3 2 #" ("
0 0 14 3 11 #"add-streams"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 12 #"scale-stream"
0 0 24 3 1 #" "
0 0 14 3 2 #"vC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 12 #"scale-stream"
0 0 24 3 1 #" "
0 0 14 3 2 #"iL"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 1 #" "
0 0 14 3 1 #"L"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 2 #"vC"
0 0 24 3 1 #" "
0 0 14 3 2 #"iL"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";(define RLC-1 (RLC 1 1 0.2 0.1))"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";(define rlc (RLC-1 10 0))"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";(define vc (car rlc))"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";(define il (cdr rlc))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(stream-ref vc 0)"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(stream-ref vc 1)"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(stream-ref vc 2)"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(stream-ref vc 3)"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(stream-ref vc 4)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(stream-ref il 0)"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(stream-ref il 1)"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(stream-ref il 2)"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(stream-ref il 3)"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(stream-ref il 4)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";Normal-order evaluation"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 12 #"Normal-order"
0 0 24 3 1 #" "
0 0 14 3 10 #"evaluation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";3.5.5 Modularity of Functional Programs and Modularity of Objects"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"3.5.5"
0 0 24 3 1 #" "
0 0 14 3 10 #"Modularity"
0 0 24 3 1 #" "
0 0 14 3 2 #"of"
0 0 24 3 1 #" "
0 0 14 3 10 #"Functional"
0 0 24 3 1 #" "
0 0 14 3 8 #"Programs"
0 0 24 3 1 #" "
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 10 #"Modularity"
0 0 24 3 1 #" "
0 0 14 3 2 #"of"
0 0 24 3 1 #" "
0 0 14 3 7 #"Objects"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; random number"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;; Use Knuth's; see"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";;; <http://en.wikipedia.org/wiki/Linear_congruential_generator>."
0 0 24 29 1 #"\n"
0 0 17 3 46 #";(define modulus (make-parameter (expt 2 64)))"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";(define multiplier (make-parameter 6364136223846793005))"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";(define increment (make-parameter 1442695040888963407))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";(define (rand-update x)"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";  (modulo (+ (* (multiplier) x) (increment)) (modulus)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; another one"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";(define (rand-update x)"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; (let ((m (expt 2 32))"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";       (a 1664525)"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";       (b 1013904423))"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";  (remainder (+ (* a x) b) m)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";(define (rand-update x)"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";  (modulo (+ (* 214013 x) 2531011) (expt 2 32)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";(define (rand-update x) (random (expt 2 31)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"rand-update"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 2 #"17"
0 0 24 3 3 #") ("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 2 #"24"
0 0 24 3 3 #") ("
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 6 #"100001"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"modulo"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 1 #"m"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";back to book..."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"random-init"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"random-numbers"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 1 #" "
0 0 14 3 11 #"random-init"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 10 #"stream-map"
0 0 24 3 1 #" "
0 0 14 3 11 #"rand-update"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 14 #"random-numbers"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"map-successive-pairs"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"cons-stream"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-car"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 20 #"map-successive-pairs"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"cesaro-stream"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 20 #"map-successive-pairs"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"r1"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 3 #"gcd"
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 14 #"random-numbers"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"monte-carlo"
0 0 24 3 1 #" "
0 0 14 3 17 #"experiment-stream"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 6 #"passed"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 6 #"failed"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"next"
0 0 24 3 1 #" "
0 0 14 3 6 #"passed"
0 0 24 3 1 #" "
0 0 14 3 6 #"failed"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"cons-stream"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 6 #"passed"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 6 #"passed"
0 0 24 3 1 #" "
0 0 14 3 6 #"failed"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 11 #"monte-carlo"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 17 #"experiment-stream"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 6 #"passed"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 6 #"failed"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 17 #"experiment-stream"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"next"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 6 #"passed"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 6 #"failed"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"next"
0 0 24 3 1 #" "
0 0 14 3 6 #"passed"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 6 #"failed"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";(define pi"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";  (stream-map"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";   (lambda (p) (sqrt (/ 6 p)))"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";   (monte-carlo cesaro-stream 0 0)))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";(stream-ref pi 1900)"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; ;this should tend to pi = 3.14159265359"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";(show-stream random-numbers 11)"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";(show-stream cesaro-stream 11)"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";(show-stream (monte-carlo cesaro-stream 0 0) 11)"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";(show-stream pi 320)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";ex.3.81"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 2 #"ex"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.81"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";from ex 3.6:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"rand-update-v2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 2 #"17"
0 0 24 3 3 #") ("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 2 #"24"
0 0 24 3 3 #") ("
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 6 #"100001"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"modulo"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 1 #"m"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"rand-init"
0 0 24 3 1 #" "
0 0 21 3 2 #"45"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"rand-v2"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 9 #"rand-init"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" () ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 14 #"rand-update-v2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 9 #"rand-init"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"generate"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 14 #"rand-update-v2"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reset"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 14 #"rand-update-v2"
0 0 24 3 1 #" "
0 0 14 3 9 #"rand-init"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"Don't understand m:\""
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 5 #"rand2"
0 0 17 3 1 #" "
0 0 17 3 10 #"'generate)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 5 #"rand2"
0 0 17 3 1 #" "
0 0 17 3 10 #"'generate)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 5 #"rand2"
0 0 17 3 1 #" "
0 0 17 3 10 #"'generate)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 5 #"rand2"
0 0 17 3 1 #" "
0 0 17 3 10 #"'generate)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 5 #"rand2"
0 0 17 3 1 #" "
0 0 17 3 7 #"'reset)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 5 #"rand2"
0 0 17 3 1 #" "
0 0 17 3 10 #"'generate)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"randomness"
0 0 24 3 1 #" "
0 0 14 3 17 #"delayed-integrand"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 13 #";(cons-stream"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 32 #"; (stream-car delayed-integrand)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"generate"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 9 #"integrand"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"force"
0 0 24 3 1 #" "
0 0 14 3 17 #"delayed-integrand"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 6 #";(if ("
0 0 17 3 23 #"stream-null? integrand)"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 21 #";    the-empty-stream"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 9 #"integrand"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        (("
0 0 14 3 10 #"randomness"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 15 3 5 #"delay"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"integrand"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"'"
0 0 14 3 8 #"generate"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 26 #";(stream-car integrand))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 21 3 1 #"'"
0 0 14 3 3 #"mum"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";(define (solve-rev f y0 dt)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";  ("
0 0 17 3 10 #"define y ("
0 0 17 3 14 #"integral-rev ("
0 0 17 3 5 #"delay"
0 0 17 3 1 #" "
0 0 17 3 2 #"dy"
0 0 17 3 2 #") "
0 0 17 3 7 #"y0 dt))"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";  ("
0 0 17 3 27 #"define dy (stream-map f y))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";  y)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";'()"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 11 #"show-stream"
0 0 17 3 1 #" "
0 0 17 3 14 #"random-numbers"
0 0 17 3 3 #" 4)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 5 #"rand3"
0 0 17 3 12 #" (randomness"
0 0 17 3 25 #" (delay random-numbers)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 5 #"rand3"
0 0 17 3 11 #" 'generate)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 5 #"rand3"
0 0 17 3 11 #" 'generate)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 5 #"rand3"
0 0 17 3 11 #" 'generate)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 5 #"rand3"
0 0 17 3 11 #" 'generate)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 5 #"rand3"
0 0 17 3 8 #" 'reset)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";'()"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand4"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"generate"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reset"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"Don't understand m:\""
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-ref"
0 0 24 3 1 #" "
0 0 14 3 14 #"random-numbers"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 5 #"rand4"
0 0 17 3 1 #" "
0 0 17 3 10 #"'generate)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 5 #"rand4"
0 0 17 3 1 #" "
0 0 17 3 10 #"'generate)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 5 #"rand4"
0 0 17 3 1 #" "
0 0 17 3 10 #"'generate)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 5 #"rand4"
0 0 17 3 1 #" "
0 0 17 3 7 #"'reset)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9         457 21           0 0           0 75 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"rand5"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"generate"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reset"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 13 #"random-number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"Don't understand m:\""
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 14 #"random-numbers"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 14 3 14 #"random-numbers"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0           0 0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"rand5"
0 0 24 3 1 #" "
0 0 14 3 14 #"delayed-stream"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"stream"
0 0 24 3 2 #" ("
0 0 14 3 5 #"force"
0 0 24 3 1 #" "
0 0 14 3 14 #"delayed-stream"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"generate"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"rand5"
0 0 24 3 2 #" ("
0 0 15 3 5 #"delay"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"stream"
0 0 24 3 5 #")))) "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reset"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"rand5"
0 0 24 3 2 #" ("
0 0 15 3 5 #"delay"
0 0 24 3 1 #" "
0 0 14 3 14 #"random-numbers"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              (("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"Don't understand m:\""
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";'()"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 8 #"random-5"
0 0 17 3 2 #" ("
0 0 17 3 5 #"rand5"
0 0 17 3 2 #" ("
0 0 17 3 5 #"delay"
0 0 17 3 18 #" random-numbers)))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 8 #"random-5"
0 0 17 3 1 #" "
0 0 17 3 10 #"'generate)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 8 #"random-5"
0 0 17 3 1 #" "
0 0 17 3 10 #"'generate)"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";((rand5"
0 0 17 3 2 #" ("
0 0 17 3 5 #"delay"
0 0 17 3 1 #" "
0 0 17 3 14 #"random-numbers"
0 0 17 3 13 #")) 'generate)"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";(rand5"
0 0 17 3 11 #" 'generate)"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";(rand5"
0 0 17 3 11 #" 'generate)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";(rand5 'reset)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 5 #"rand5"
0 0 17 3 11 #" 'generate)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 90
(
 #";;;; from Wizard book.... (see https://wizardbook.wordpress.com/2010"
 #"/12/23/exercise-3-81/)"
) 0 0 24 29 1 #"\n"
0 0 17 3 94
(
 #"; does not quite work as it is using inherent in racet streams... i "
 #"get what it is meant to do"
) 0 0 24 29 1 #"\n"
0 0 17 3 97
(
 #"; but this is not what i wanted to create... i wanted rand to behave"
 #" like it was previously, i.e."
) 0 0 24 29 1 #"\n"
0 0 17 3 105
(
 #"; calling (rand 'generate) adn getting different results each time, "
 #"then call (rand 'reset) and obtaining"
) 0 0 24 29 1 #"\n"
0 0 17 3 112
(
 #"; the random number from the begininng. However, wizard's solution i"
 #"s such that instead of calling this function"
) 0 0 24 29 1 #"\n"
0 0 17 3 112
(
 #"; many times, i pass a stream of 'generates' or reset's and get that"
 #" stream of randoms... this is clearly not as"
) 0 0 24 29 1 #"\n"
0 0 17 3 115
(
 #"; flexible. However, i think that my hope was not going to work as I"
 #" was trying to make sth functional behave as if"
) 0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #"; it had a local state and could remember where it left off... not f"
 #"unctional by nature. "
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"initial-seed"
0 0 24 3 1 #" "
0 0 21 3 3 #"317"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"wiz-rand-update"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"random"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 2 #"31"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"wiz-random-init"
0 0 24 3 1 #" "
0 0 14 3 4 #"seed"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"random-seed"
0 0 24 3 1 #" "
0 0 14 3 4 #"seed"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"wiz-rand-update"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";Next, generating an infinite random-stream from a seed value"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"random-stream"
0 0 24 3 1 #" "
0 0 14 3 4 #"seed"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"random-from"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 2 #" ("
0 0 14 3 15 #"wiz-random-init"
0 0 24 3 1 #" "
0 0 14 3 4 #"seed"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 10 #"stream-map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 15 #"wiz-rand-update"
0 0 24 3 3 #")) "
0 0 14 3 11 #"random-from"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 11 #"random-from"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";Finally generating a random stream from a stream of requests."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"wiz-rand"
0 0 24 3 1 #" "
0 0 14 3 4 #"seed"
0 0 24 3 1 #" "
0 0 14 3 8 #"requests"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rand-iter"
0 0 24 3 1 #" "
0 0 14 3 7 #"randoms"
0 0 24 3 1 #" "
0 0 14 3 7 #"actions"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"stream-null?"
0 0 24 3 1 #" "
0 0 14 3 7 #"actions"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"null"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 7 #"request"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 7 #"actions"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"generate"
0 0 24 3 1 #" "
0 0 14 3 7 #"request"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 7 #"randoms"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 9 #"rand-iter"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"randoms"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"actions"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reset"
0 0 24 3 1 #" "
0 0 14 3 7 #"request"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 11 #"new-randoms"
0 0 24 3 2 #" ("
0 0 14 3 13 #"random-stream"
0 0 24 3 2 #" ("
0 0 14 3 11 #"random-init"
0 0 24 3 1 #" "
0 0 14 3 4 #"seed"
0 0 24 3 5 #")))) "
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 11 #"cons-stream"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-car"
0 0 24 3 1 #" "
0 0 14 3 11 #"new-randoms"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 9 #"rand-iter"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 11 #"new-randoms"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"stream-cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"actions"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"RAND -- unknown request\""
0 0 24 3 1 #" "
0 0 14 3 7 #"request"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"rand-iter"
0 0 24 3 2 #" ("
0 0 14 3 13 #"random-stream"
0 0 24 3 2 #" ("
0 0 14 3 15 #"wiz-random-init"
0 0 24 3 1 #" "
0 0 14 3 4 #"seed"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 8 #"requests"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 11 #"show-stream"
0 0 17 3 2 #" ("
0 0 17 3 8 #"wiz-rand"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 2 #" ("
0 0 17 3 11 #"cons-stream"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"generate"
0 0 17 3 2 #" ("
0 0 17 3 11 #"cons-stream"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"generate"
0 0 17 3 2 #" ("
0 0 17 3 11 #"cons-stream"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 5 #"reset"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"generate"
0 0 17 3 5 #")))) "
0 0 17 3 2 #"4)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 8 #"wiz-rand"
0 0 17 3 2 #" ("
0 0 17 3 11 #"make-stream"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"generate"
0 0 17 3 6 #" '()))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 8 #"wiz-rand"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"generate"
0 0 17 3 3 #" 5)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 8 #"wiz-rand"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"generate"
0 0 17 3 3 #" 5)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 8 #"wiz-rand"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 5 #"reset"
0 0 17 3 3 #" 5)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 8 #"wiz-rand"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"generate"
0 0 17 3 3 #" 5)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 8 #"wiz-rand"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 8 #"generate"
0 0 17 3 3 #" 5)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 8 #"random-5"
0 0 17 3 11 #" 'generate)"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";((rand5"
0 0 17 3 2 #" ("
0 0 17 3 5 #"delay"
0 0 17 3 1 #" "
0 0 17 3 27 #"random-numbers)) 'generate)"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(rand5 'generate)"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(rand5 'generate)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";(rand5 'reset)"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(rand5 'generate)"
0           0
